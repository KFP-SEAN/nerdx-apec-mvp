version: '3.8'

services:
  # Neo4j Database for World Model
  neo4j:
    image: neo4j:5.16.0
    container_name: nerdx-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/nerdxpassword
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - nerdx-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and queue management
  redis:
    image: redis:7.2-alpine
    container_name: nerdx-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - nerdx-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Phase 1: World Model API
  phase1-api:
    build:
      context: ./phase1-world-model
      dockerfile: Dockerfile
    container_name: nerdx-phase1-api
    ports:
      - "8001:8001"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8001
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=nerdxpassword
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nerdx-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Phase 2: Agentic System (Sora + CAMEO)
  phase2-api:
    build:
      context: ./phase2-agentic-system
      dockerfile: Dockerfile
    container_name: nerdx-phase2-api
    ports:
      - "8002:8002"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8002
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=1
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PHASE1_API_URL=http://phase1-api:8001
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-nerdx-videos}
      - AWS_REGION=${AWS_REGION:-us-west-2}
    depends_on:
      redis:
        condition: service_healthy
      phase1-api:
        condition: service_healthy
    networks:
      - nerdx-network
    restart: unless-stopped
    volumes:
      - cameo_videos:/app/videos
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Phase 3: Commerce & AR
  phase3-api:
    build:
      context: ./phase3-conversion
      dockerfile: Dockerfile
    container_name: nerdx-phase3-api
    ports:
      - "8003:8003"
    environment:
      - NODE_ENV=production
      - PORT=8003
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - PHASE1_API_URL=http://phase1-api:8001
      - PHASE2_API_URL=http://phase2-api:8002
      - REDIS_URL=redis://redis:6379
    depends_on:
      phase1-api:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nerdx-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nerdx-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:8001
      - NEXT_PUBLIC_PHASE2_API_URL=http://localhost:8002
      - NEXT_PUBLIC_PHASE3_API_URL=http://localhost:8003
    depends_on:
      - phase1-api
      - phase2-api
      - phase3-api
    networks:
      - nerdx-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nerdx-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - phase1-api
      - phase2-api
      - phase3-api
    networks:
      - nerdx-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: nerdx-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - nerdx-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: nerdx-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - nerdx-network
    restart: unless-stopped

volumes:
  neo4j_data:
  neo4j_logs:
  redis_data:
  prometheus_data:
  grafana_data:
  cameo_videos:

networks:
  nerdx-network:
    driver: bridge
