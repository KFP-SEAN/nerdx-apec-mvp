version: '3.8'

services:
  phase3-conversion:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nerdx-phase3-conversion
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3003
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      STRIPE_TAX_ENABLED: ${STRIPE_TAX_ENABLED:-false}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
      PHASE1_API_URL: ${PHASE1_API_URL:-http://phase1-foundation:3001/api}
      AR_SERVICE_URL: ${AR_SERVICE_URL:-http://localhost:3003/api/ar}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    networks:
      - nerdx-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: nerdx-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - nerdx-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  nerdx-network:
    name: nerdx-network
    driver: bridge

volumes:
  redis-data:
    name: nerdx-redis-data
