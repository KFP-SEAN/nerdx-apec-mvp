/**
 * Product Detail Page
 * Auto-generated by Phase A automation
 */

'use client';

import { useState, useEffect } from 'react';
import { shopifyService, ShopifyProduct } from '@/lib/shopify/client';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import { useCart } from '@/context/CartContext';

export default function ProductDetailPage({ params }: { params: { handle: string } }) {
  const router = useRouter();
  const { addToCart } = useCart();
  const [product, setProduct] = useState<ShopifyProduct | null>(null);
  const [loading, setLoading] = useState(true);
  const [selectedVariant, setSelectedVariant] = useState(0);
  const [quantity, setQuantity] = useState(1);

  useEffect(() => {
    loadProduct();
  }, [params.handle]);

  async function loadProduct() {
    try {
      setLoading(true);
      const data = await shopifyService.getProductByHandle(params.handle);
      setProduct(data);
    } catch (err) {
      console.error('Error loading product:', err);
    } finally {
      setLoading(false);
    }
  }

  async function handleAddToCart() {
    if (!product) return;

    await addToCart({
      variantId: product.variants[selectedVariant].id,
      quantity,
      product: {
        id: product.id,
        title: product.title,
        image: product.images[0]?.url,
        price: product.variants[selectedVariant].price
      }
    });

    alert('장바구니에 추가되었습니다!');
  }

  async function handleBuyNow() {
    if (!product) return;

    const checkout = await shopifyService.createCheckout([
      {
        variantId: product.variants[selectedVariant].id,
        quantity
      }
    ]);

    window.location.href = checkout.webUrl;
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">제품을 찾을 수 없습니다</h1>
          <button
            onClick={() => router.push('/products/shopify')}
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            제품 목록으로 돌아가기
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Image Gallery */}
        <div>
          <div className="relative h-96 bg-gray-100 rounded-lg overflow-hidden mb-4">
            {product.images[0] ? (
              <Image
                src={product.images[0].url}
                alt={product.title}
                fill
                className="object-cover"
              />
            ) : (
              <div className="flex items-center justify-center h-full text-gray-400">
                No Image
              </div>
            )}
          </div>

          {/* Thumbnail Gallery */}
          {product.images.length > 1 && (
            <div className="grid grid-cols-4 gap-2">
              {product.images.map((image, index) => (
                <div
                  key={index}
                  className="relative h-20 bg-gray-100 rounded cursor-pointer hover:opacity-75"
                >
                  <Image
                    src={image.url}
                    alt={`${product.title} - ${index + 1}`}
                    fill
                    className="object-cover"
                  />
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Product Info */}
        <div>
          {/* Badges */}
          <div className="flex flex-wrap gap-2 mb-4">
            {product.metafields?.arEnabled && (
              <span className="bg-purple-600 text-white text-xs px-3 py-1 rounded-full">
                AR 체험 가능
              </span>
            )}
            {product.metafields?.apecLimited && (
              <span className="bg-red-600 text-white text-xs px-3 py-1 rounded-full">
                APEC 한정판
              </span>
            )}
            {product.metafields?.stockRemaining !== undefined && (
              <span className="bg-gray-800 text-white text-xs px-3 py-1 rounded-full">
                재고: {product.metafields.stockRemaining}개
              </span>
            )}
          </div>

          <h1 className="text-3xl font-bold mb-4">{product.title}</h1>

          <div className="mb-6">
            <span className="text-4xl font-bold text-blue-600">
              ${product.variants[selectedVariant].price}
            </span>
            <span className="text-gray-500 ml-2">KRW</span>
          </div>

          {/* Description */}
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">상품 설명</h2>
            <div
              className="prose max-w-none"
              dangerouslySetInnerHTML={{ __html: product.descriptionHtml }}
            />
          </div>

          {/* Variant Selection */}
          {product.variants.length > 1 && (
            <div className="mb-6">
              <h2 className="text-xl font-semibold mb-2">옵션 선택</h2>
              <select
                value={selectedVariant}
                onChange={(e) => setSelectedVariant(Number(e.target.value))}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg"
              >
                {product.variants.map((variant, index) => (
                  <option key={variant.id} value={index}>
                    {variant.title} - ${variant.price}
                  </option>
                ))}
              </select>
            </div>
          )}

          {/* Quantity */}
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">수량</h2>
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setQuantity(Math.max(1, quantity - 1))}
                className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                -
              </button>
              <span className="text-xl font-semibold">{quantity}</span>
              <button
                onClick={() => setQuantity(quantity + 1)}
                className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                +
              </button>
            </div>
          </div>

          {/* Actions */}
          <div className="flex space-x-4 mb-6">
            <button
              onClick={handleAddToCart}
              className="flex-1 px-6 py-3 border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 transition font-semibold"
            >
              장바구니 담기
            </button>
            <button
              onClick={handleBuyNow}
              className="flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-semibold"
            >
              바로 구매
            </button>
          </div>

          {/* AR Preview */}
          {product.metafields?.arEnabled && product.metafields?.arAssetUrl && (
            <div className="border-t pt-6">
              <button
                onClick={() => router.push(`/ar-viewer?product=${product.handle}`)}
                className="w-full px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition font-semibold"
              >
                🥽 AR로 미리보기
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
